// Import dataset.
var dataset = ee.ImageCollection('NASA/OCEANDATA/MODIS-Aqua/L3SMI')
  // Filter dates, change only the years and comment out other dates and keep only which you want
  //.filterDate('2014-12-01', '2015-02-28')
  .filterDate('2015-03-01', '2015-05-31')
  //.filterDate('2015-06-01', '2015-09-30')
  //.filterDate('2015-10-01', '2015-11-30')
  // Mosaic all images in the collection (could use .mean() or .median())
  .mosaic()
  // Select only the two bands of interest.
  .select(['chlor_a', 'sst', 'poc']);
  
// Calculate the range of 2nd to 98th percentile to bound data for visualization.
// Statistics are calculated only within the region of interest.
var range = dataset.reduceRegion({
  reducer: ee.Reducer.percentile({
    percentiles: [2, 98],
    outputNames: ['p2', 'p98']}),
  geometry: aoi,
  scale: 4600});
print('Value range:', range);


// Make a function that scales the data between the 2nd to 98th percentiles to
// the 8-bit range (0 to 255) for visualization.
function scaleVis(img, min, max) {
  min = ee.Image.constant(min);
  max = ee.Image.constant(max);
  return img
    .subtract(min)
    .divide(max.subtract(min))
    .multiply(255)
    .round()
    .toByte();
}

// Select and apply the visualization function to the 'poc' data.
var poc = dataset.select('poc').clip(aoi);
var pocVis = scaleVis(
  poc, range.get('poc_p2'), range.get('poc_p98'));


// Select and apply the visualization function to the 'chlor_a' data.
var chlor_a = dataset.select('chlor_a').clip(aoi);
var chlor_aVis = scaleVis(
  chlor_a, range.get('chlor_a_p2'), range.get('chlor_a_p98'));

// Select and apply the visualization function to the 'sst' data.
var sst = dataset.select('sst').clip(aoi);  
var sstVis = scaleVis(
  sst, range.get('sst_p2'), range.get('sst_p98'));

// Make a blank image with all values set at 0.
var blank = ee.Image.constant(0).toByte();

// Make an RGB visualization image, where red represents chlor_a,
// green is set to no representation (blank image), and blue represents
// sst.
var vis = ee.Image.rgb(chlor_aVis, pocVis, sstVis);

// Display the original data and the visualization data to the map.
// Use the Inspector tab and click to explorer actual values for different
// regions of color.
Map.centerObject(aoi,7);
Map.addLayer(dataset.clip(aoi), null, 'Dataset');
Map.addLayer(vis.clip(aoi), null, 'Visualization');

Export.image.toDrive({
    image: dataset.clip(aoi),
    description: 'Water_Quality_Parameters',
    fileNamePrefix: 'Products_2003_winter',
    folder: 'MODIS_Water_Quality_Products',
    region: aoi,
    crs: 'EPSG:32643',
    scale: 4600,
    maxPixels: 1e13
  });
  
// Export.table.toDrive({
//   collection: range1,
//   description: '2_and_98_Percentile_Values',
//   fileNamePrefix: 'Products_2003_winter_values',
//   folder: 'MODIS_Water_Quality_Products',
//   fileFormat: 'CSV'
// })


var reducer = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true
});
var multiStats = dataset.reduceRegion({
  reducer: reducer,
  geometry: aoi,
  scale: 4600,
  crs: 'EPSG:32643',
});

print('Mean & SD band values', multiStats);

var reducer1 = ee.Reducer.min().combine({
  reducer2: ee.Reducer.max(),
  sharedInputs: true
});
var multiStats1 = dataset.reduceRegion({
  reducer: reducer1,
  geometry: aoi,
  scale: 4600,
  crs: 'EPSG:32643',
});

print('Max and Minimum val', multiStats1);

var samples = dataset.sample({
  region: aoi,
  geometries: true,
  scale: 4600, 
});

// Call reducer correctly:
var correl = ee.Reducer.pearsonsCorrelation();

// Then choose two properties to see the correlation:
var reduced = samples.reduceColumns(correl, ['chlor_a', 'sst'])
var reduced1 = samples.reduceColumns(correl, ['chlor_a', 'poc'])

print(reduced)
print(reduced1)

var feature = ee.Feature(null,{chlorA_min:multiStats.get('chlor_a_mean')})
print(feature)